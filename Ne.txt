Next

Types of Routing in Next.js

> Filename and function can be different 



ðŸ”¹ 1. Static Routing
Creates a route for every file in the pages/ or app/ directory.

Example (Pages Router):
/pages/about.js     â†’ /about
/pages/contact.js   â†’ /contact

export default function About() {
    return <h1>This is the About Page</h1>;
}
 
 
Example (App Router):

/app/about/page.js  â†’ /about
/app/contact/page.js  â†’ /contact

export default function About2Page() {
  return <h1>This is the About Page (App Router)</h1>;
}



ðŸ”¹ 2. Dynamic Routing
Routes that use dynamic parameters using square brackets.

Pages Router:
/pages/blog/[slug].js   â†’ /blog/hello-world

import { useRouter } from 'next/router';
export default function BlogPost() {
  const router = useRouter();
  const { slug } = router.query;
  return <h1>Blog Post: {slug}</h1>;//hello-world
}


App Router:

/app/blog/[slug]/page.js â†’ /blog/hello-world

export default async function  BlogPost({ params }) {
  const params1 = await params;
  return <h1>Blog Post: {params1.slug}</h1>;//hello-world
}



ðŸ”¹ 3. Catch-All & Optional Catch-All Routing, ? cant be used in it. separated by / only, slug urls are allowed.
Catch-All: ... captures multiple segments

Optional Catch-All: [[...param]] makes it optional

Pages Router:

/pages/docs/[...params].js      â†’ /docs/a/b/c  //required at least one param
/pages/docs/[[...params]].js    â†’ /docs or /docs/a/b //params not required but optional

// pages/docs/[[...params]].js
import { useRouter } from 'next/router';
export default function DocsPage() {
  const router = useRouter();
  const { params = [] } = router.query;
    console.log(params);
  return (
    <div>
      <h1>Docs</h1>
      <p>Path: {params.join(' / ') || 'Home'}</p>
    </div>
  );
}



App Router:

/app/docs/[...params]/page.js
/app/docs/[[...params]]/page.js /docs or /docs/aa/bb/cc/dd

export default function Docs({ params }) {
  return <p>Optional Path: {params.params?.join(" / ") || "Home"}</p>;//Optional Path: aa / bb / cc / dd
}



ðŸ”¹ 4. Nested Routing (App Router only)
Automatically handled through folder structure and layouts.

/app/dashboard/layout.js         â†’ layout for dashboard/*
export default async function  BlogPost({ children }) {
    return <><h1>Header for all dashboard</h1>{children}</>;
  }

/app/dashboard/page.js           â†’ /dashboard
export default async function  BlogPost() {
    return <h1>Dashboard Page</h1>;
}

/app/dashboard/settings/page.js â†’ /dashboard/settings
export default async function  BlogPost() {
    return <h1>Dashboard  Setting Page</h1>;
}

app/dashboard/settings/[slug]/page.js â†’ dashboard/settings/hello
export default async function  BlogPost({params}) {
    const params1 = await params;
    return <h1>Blog Post: {params1.slug}</h1>;//hello
}


ðŸ”¹ 5. Programmatic Routing (Client-side Navigation)
Use next/router or useRouter hook to navigate programmatically.

Pages Router:
import { useRouter } from 'next/router';

const router = useRouter();
router.push('/about');

App Router:
Use <Link> or useRouter() from next/navigation.



ðŸ”¹ 6. API Routes (Pages Router only)
File-based serverless functions in /pages/api/.

/pages/api/hello.js â†’ GET /api/hello



ðŸ”¹ 7. Middleware-based Routing
Use middleware.js to rewrite, rrect, or protect routes at edge.

js// middleware.js
export function middleware(request) {
  const isLoggn = checkAuth(request);
  if (!isLoggn) return NextResponse.rrect('/login');
}



ðŸ”¹ 8. Rewrites and Rrects (Custom Routing)
Defined in next.config.js.

jsmodule.exports = {
  async rrects() {
    return [
      {
        source: '/old-about',
        destination: '/about',
        permanent: true,
      },
    ];
  },
};

=======================================

title and description for meta content such as title description favicon etc.

app/

export const metadata = {
  title: "title goes here about2",
  description: "Optional page description",
  icons: {
    icon: '/ak.png', // Path must start with "/"
  },
};

pages/

 <Head>
<title>Title Goes here</title>
<meta name="description" content="content goes here"></meta>
<link rel="icon" href="ak.png" type="image/png"></link>
</Head>
            
=======================================
we can add script tag for custom js.

public/src.js

<Script src="/src.js" strategy="lazyOnload"></Script>


=======================================
We can add image tag for providing strategy, image optimization etc.

 <Image
      src="/profile.png"
      width={500}
      height={500}
      alt="Picture of the author"
      loading="lazy"
    />


=======================================
Link other pages in current page.

<Link href="/dashboard">Dashboard</Link>


=======================================
pages/styles/Home.module.css
.label {
	color:gray
}


in otherpages use-
import styles from "../styles/Home.module.css"

<div className={styles.label}>


=======================================
styled jsx. we can create component specific css using styled jsx.
if you want to use this style jsx in other component that is importing the component in which this style already added. add <style jsx global>.
<style jsx>
{
`
	.dummy {
		color:gray;
	}
`
}
</style>

=======================================
Api routes.

import fs from 'fs'

export default async function blog(req, res) {
  // console.log(req.body);

  if (req.method === "POST" && req.body) {
  // POST http://localhost:3000/api/blog
  //   {
  //     "name": "asdfaf",
  //     "email": "asdf@ss.ss",
  //     "title": "asdf",
  //     "shortDescription": "asdf",
  //     "description": "asdf"
  // }

    try {
        let data = JSON.parse(req.body);
        const totalBlog = await fs.promises.readdir("src/pages/blogdata");
        let currentIndex = totalBlog.length+1;
        data['slug'] = "blog_"+currentIndex;
        const addBlog = await fs.promises.writeFile(`src/pages/blogdata/blog_${currentIndex}.json`, JSON.stringify(data));
        return res.status(200).json({ message: `Blog has been saved successfully` });
      } catch (err) {
        return res.status(500).json({ message: `Something went wrong`,e:err });
      }

  } else if (req.method === "GET") {
    // console.log(req.query.slug);
    // GET http://localhost:3000/api/blog
    // GET http://localhost:3000/api/blog/?slug=blog_1
    let response = [];
    try {
      if(req.query.slug) {

        let slug = req.query.slug;
        let blogContent = await fs.promises.readFile(`src/pages/blogdata/${slug}.json`, 'utf-8');
        response.push(JSON.parse(blogContent));

      } else {

        let blogs = await fs.promises.readdir("src/pages/blogdata");
        for(let index in blogs) {
          let data = blogs[index];
          let blogContent = await fs.promises.readFile(`src/pages/blogdata/${data}`, 'utf-8');
          response.push(JSON.parse(blogContent));
        }

      }
    } catch (err) {
          
    }
    return res.status(200).json(response);
  }

  res.setHeader("Allow", ["GET", "POST"]);
  res.status(405).end(`Method ${req.method} Not Allowed`);
}


=======================================
