





Primitive :- 
number, string, boolean null undefined, symbol, bigint

Non primitive :- 
array object


=====> Template letarals :-

let a = {name: "amir",age:18};
let b = `my name is ${a.name}  and my age is ${a.age}`;
console.log(b);


=====> Comments :- comment is the non executable lines of the code.
single line comments, multi line comments.


=====> Operators
Arithmetic :-  = + - * / **

Assignment :-  = = += -= *= /= 


let a = 50;
a += 5;
console.log(a);//55

let a = 50;
a -= 5;
console.log(a);//45

let a = 50;
a *= 5;
console.log(a);//250

let a = 50;
a /= 5;
console.log(a);//10


Increment :-  ++a a++ --b b--

Logical :- && || !

Ternary :- condition ? first expression : second expression


=====> Loops

while :- 
do while :- 
for :- 

var i = 0;
for(i = 0; i<=5; i++) {
    console.log(i); // 012345
}
console.log(i);//6

for in :- for in used to iterate on array as well as object.
let a =  {"aa":"asdfasdf"};
for (let aa in a) {
    console.log(a[aa]);
}


for of :- For of used to iterate on array not for objects.

let a =  [1,2,3,4,5];

for (let aa of a) {
    console.log(aa);
}




=====> String Methods :- 

==> toUpperCase() -


==> toLowerCase() - 

==> slice() - from starting of first index to right before the second index.

let a =  "HelloMyNameIsAmirKhan";
b = a.slice(0,4);
console.log(b); // Hell

let a =  "HelloMyNameIsAmirKhan";
b = a.slice(1,4);
console.log(b);//ell


==> concat() - Merge two strings into one string
let aa = "asdf";
aa.concat("1asdfasdf");
console.log(aa); // asdf 


let aa = "asdf";
aa = aa.concat("1asdfasdf");
console.log(aa); //asdf1asdfasdf


==> replace() - replace matching string with other string for one time only.
var str = "Hello my name is amir khan kh and khan";
str.replace("kh"," as ")
//'Hello my name is amir  as an kh and khan'


==> replaceAll() - replace each matching string with other string

var str = "Hello my name is amir khan kh and khan";
str.replaceAll("kh"," as ");//Hello my name is amir  as an  as  and  as an


==> trim() - removes whitespace from left and right side.

var str = "     Hello my name is amir khan kh and khan    ";
str.trim();
//'Hello my name is amir khan kh and khan'





=====> Strings are immutable means change using string method will not change actual string. It returns a new string we have to use that string.

let aa = "asdf";
aa[0] = "b";
console.log(aa); //asdf

==> Arrays are mutable

let aa = ["asdf","asdff"];
aa[0] = "b";
aa[2] = "c";
console.log(aa);//['b', 'asdff','c']



=====> Array methods :- 

push :- add to end and return 
let a =  [1,2,3,4,5];
a.push(10);
console.log(a);//[1, 2, 3, 4, 5, 10]


pop :- delete from end and return deleted value
let a =  [1,2,3,4,5];
a.pop();
console.log(a);//[1, 2, 3, 4]


toString :- 
let a =  [1,2,3,4,5];
b = a.toString();
console.log(b);//1,2,3,4,5

concat :- joins one or more arrays separated by comma into one array and return new array.

const marvelHeros = ['spiderman','ironman'];
const myHeros = ["superman","batman"];
console.log(marvelHeros);
let allHeros = marvelHeros.concat(myHeros);
console.log(allHeros);

unshift :- Add to Start
const marvelHeros = ['spiderman','ironman'];
marvelHeros.unshift("asdf");
console.log(marvelHeros); // ['asdf', 'spiderman', 'ironman']


shift :- delete from start and return deleted value.
const marvelHeros = ['spiderman','ironman'];
var delet = marvelHeros.shift();
console.log("deleted " ,delet); // deleted spiderman
console.log(marvelHeros); // ['ironman']

map :- loop through each value and returns new array. returns each value and undefined.
let aa = [1,2,3,4,4,5,66,7,88];
let bb = aa.map(function(val, idx) {
    return val*2;
});
console.log(bb);//2,4,6,8,10...


filter :- create new array, returns value if true else returns nothing.
let aa = [1,2,3,4,4,5,66,7,88];
let bb = aa.filter(function(val, idx) {
    return val>50?true:false;
});
console.log(bb); // 66,88


filter :- 

array.reduce(function(total, currentValue, currentIndex, arr), initialValue)


const numbers = [15.5, 2.3, 1.1, 4.7];

let newArr = numbers.reduce(getSum, 0);
console.log(newArr);
function getSum(total, num,idx) {
    console.log("a "+total+ " b "+num+" "+idx);
  return total ;
}





splice
filter
reduce
map





| Feature                   | CommonJS (CJS)                 | ECMAScript Modules (ESM)                                  |
| ------------------------- | ------------------------------ | --------------------------------------------------------- |
| Syntax                    | `require()` / `module.exports` | `import` / `export`                                       |
| Loading Type              | Synchronous                    | Asynchronous                                              |
| File Extension (default)  | `.js`                          | `.mjs` or `.js` with `"type": "module"` in `package.json` |
| Top-Level `await`         | ❌ Not supported               | ✅ Supported                                               |
| Node.js Default (pre-v14) | ✅ Yes                         | ❌ No (must opt in)                                        |
| Tree Shaking              | ❌ No                          | ✅ Yes (in bundlers like Webpack)                          |
| Scope                     | File-scoped                    | Strict module scoping                                     |



=====>
old way of accessing data from other files. called cjs.

first.js 

let obj = require("./second.js");
obj.hello();
console.log(obj.text);


second.js
let hello = function() {
    console.log("hello");
};
let obj = {
    hello:hello,
    text:"text goes here"
};
module.exports = obj;


=====> 
modern way of calling files. called ecm. 
first.js

import obj from "./second.js";
obj.hello();
console.log(obj.text);


second.js

let hello = function() {
    console.log("hello");
};
let obj = {
    hello:hello,
    text:"text goes here"
};
export default obj;

=====>
.js required type module in package json. whereas we can directly use import using 
first.mjs
import obj from "./second.mjs";
obj.hello();
console.log(obj.text);


second.mjs
let hello = function() {
    console.log("hello");
};
let obj = {
    hello:hello,
    text:"text goes here"
};
export default obj;


=====>

The event will get overridden and only last event will be executed.

let button = document.createElement("button");
button.innerText = "OK";
button.onclick = function () {
	console.log("clicked");
}
button.onclick = function () {
	console.log("clicked2");
}
let body = document.querySelector("body");
body.append(button);




print all document data.
console.log(window.document);


getEelementById
getElementsByTagName
querySelector
querySelectorAll



let body = document.querySelector("body");
body.style.backgroundColor="gray";

let button = document.createElement("button");
button.innerText = "OK";
button.setAttribute("class", "class-name"); //update class name and value
button.classList.add("asdf"); // append class name and value
button.style.backgroundColor="gray";

console.log(button.innerHtml);
console.log(button.getAttribute("class"));
body.append(button);
button.addEventListener("click",function() { //we can add multiple events just like this.
    console.log("button clicked");
});











